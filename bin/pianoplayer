#!/usr/bin/python
#
#-------------------------------------------------------------------------------
# Name:         PianoPlayer
# Purpose:      Find optimal fingering for piano scores
# Author:       Marco Musy
#-------------------------------------------------------------------------------

from __future__ import division, print_function
import os, sys
from music21 import converter
from pianoplayer.hand import Hand
from pianoplayer.scorereader import reader

import argparse

pr = argparse.ArgumentParser(description="""PianoPlayer,
check out home page https://github.com/marcomusy/pianoplayer""")
pr.add_argument("filename", type=str, help="Input music xml/midi file name")
pr.add_argument("-o", "--outputfile", metavar='', type=str, help="Annotated output xml file name", default='output.xml')
pr.add_argument("-n", "--n-measures", metavar='', type=int, help="[100] Number of score measures to scan", default=100)
pr.add_argument("-s", "--start-measure", metavar='', type=int, help="Start from measure number [1]", default=1)
pr.add_argument("-d", "--depth", metavar='', type=int, help="[auto] Depth of combinatorial search, [4-9]", default=0)
pr.add_argument("--debug",             help="Switch on verbosity", action="store_true")
pr.add_argument("-m", "--musescore",   help="Open output in musescore after processing", action="store_true")
pr.add_argument("-b", "--below-beam",  help="Show fingering numbers below beam line", action="store_true")
pr.add_argument("-x", "--hand-stretch",    help="Enable hand stretching", action="store_true")
pr.add_argument("-XXS", "--hand-size-XXS", help="Set hand size to XXS", action="store_true")
pr.add_argument("-XS", "--hand-size-XS",   help="Set hand size to XS", action="store_true")
pr.add_argument("-S", "--hand-size-S",     help="Set hand size to S", action="store_true")
pr.add_argument("-M", "--hand-size-M",     help="Set hand size to M", action="store_true")
pr.add_argument("-L", "--hand-size-L",     help="Set hand size to L", action="store_true")
pr.add_argument("-XL", "--hand-size-XL",   help="Set hand size to XL", action="store_true")
pr.add_argument("-XXL", "--hand-size-XXL", help="Set hand size to XXL", action="store_true")
args = pr.parse_args()

hand_size = 'XL' # default
if args.hand_size_XXS: hand_size = 'XXS'
if args.hand_size_XS : hand_size = 'XS'
if args.hand_size_S  : hand_size = 'S'
if args.hand_size_M  : hand_size = 'M'
if args.hand_size_L  : hand_size = 'L'
if args.hand_size_XL : hand_size = 'XL'
if args.hand_size_XXL: hand_size = 'XXL'

xmlfn = args.filename
if '.msc' in args.filename:
    try:
        xmlfn = str(args.filename).replace('.mscz', '.xml').replace('.mscx', '.xml')
        print('..trying to convert your musescore file to',xmlfn)
        os.system('musescore -f "'+args.filename+'" -o "'+xmlfn+'"') # quotes avoid problems w/ spaces in filename
    except:
        print('Unable to convert file, try to do it from musescore.')
        sys.exit()

sf = converter.parse(xmlfn)

for index, item in enumerate(sf.parts):
    hand = Hand(item.id, hand_size)
    hand.verbose = args.debug
    if args.depth == 0:
        hand.autodepth = True
    else:
        hand.autodepth = False
        hand.depth = args.depth
    hand.lyrics = args.below_beam
    hand.handstretch = args.hand_stretch

    hand.noteseq = reader(sf, beam=index)
    hand.generate(args.start_measure, args.n_measures)

sf.write('xml', fp=args.outputfile)

if args.musescore:
    try:
        os.system('musescore "'+args.outputfile+'" &')
    except:
        print('Unable to convert musescore file')
else:
    print ("\nTo visualize annotated score with fingering type:\n musescore '"+args.outputfile+"'")

